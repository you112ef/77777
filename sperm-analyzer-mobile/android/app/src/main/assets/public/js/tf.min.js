// Minimal TensorFlow.js Mock for Demo
// This is a placeholder for the actual TensorFlow.js library

window.tf = {
    // Mock TensorFlow.js functions for demo purposes
    ready: () => Promise.resolve(),
    
    loadLayersModel: async (url) => {
        console.log('TensorFlow.js: Loading model from', url);
        
        // Simulate loading time
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        return {
            predict: (input) => {
                console.log('TensorFlow.js: Running prediction on', input);
                
                // Mock prediction results
                return {
                    dataSync: () => [
                        Math.random(), // concentration score
                        Math.random(), // motility score  
                        Math.random(), // morphology score
                        Math.random()  // viability score
                    ],
                    dispose: () => {}
                };
            },
            dispose: () => {
                console.log('TensorFlow.js: Model disposed');
            }
        };
    },
    
    tensor: (data, shape) => {
        return {
            data,
            shape,
            dataSync: () => data,
            dispose: () => {}
        };
    },
    
    browser: {
        fromPixels: (imageElement) => {
            console.log('TensorFlow.js: Converting image to tensor');
            
            // Mock tensor from image
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = 224;
            canvas.height = 224;
            
            try {
                ctx.drawImage(imageElement, 0, 0, 224, 224);
                const imageData = ctx.getImageData(0, 0, 224, 224);
                
                return {
                    shape: [224, 224, 3],
                    data: imageData.data,
                    dataSync: () => Array.from(imageData.data),
                    dispose: () => {},
                    expandDims: (axis) => ({
                        shape: [1, 224, 224, 3],
                        dataSync: () => Array.from(imageData.data),
                        dispose: () => {}
                    })
                };
            } catch (error) {
                console.warn('TensorFlow.js: Error processing image:', error);
                
                // Return dummy tensor
                return {
                    shape: [224, 224, 3],
                    data: new Array(224 * 224 * 3).fill(0),
                    dataSync: () => new Array(224 * 224 * 3).fill(0),
                    dispose: () => {},
                    expandDims: (axis) => ({
                        shape: [1, 224, 224, 3],
                        dataSync: () => new Array(224 * 224 * 3).fill(0),
                        dispose: () => {}
                    })
                };
            }
        }
    },
    
    dispose: (tensor) => {
        if (tensor && typeof tensor.dispose === 'function') {
            tensor.dispose();
        }
    },
    
    memory: () => ({
        numTensors: 0,
        numDataBuffers: 0,
        numBytes: 0,
        unreliable: false
    }),
    
    version: {
        'tfjs-core': '4.0.0-mock',
        'tfjs-backend-webgl': '4.0.0-mock',
        'tfjs': '4.0.0-mock'
    }
};

// Export for Node.js compatibility
if (typeof module !== 'undefined' && module.exports) {
    module.exports = window.tf;
}

console.log('TensorFlow.js Mock loaded - Version:', window.tf.version.tfjs);