name: 🧬 Build Android APK - Sperm Analyzer AI

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug
      upload_artifacts:
        description: 'Upload APK as artifacts'
        required: true
        default: true
        type: boolean
      create_release:
        description: 'Create GitHub Release'
        required: true
        default: true
        type: boolean
  push:
    branches: [ "*" ]  # All branches
    tags: [ 'v*' ]
  pull_request:
    branches: [ "*" ]  # All branches

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  FLUTTER_VERSION: 'stable'

jobs:
  build-android:
    name: 🤖 Build Android APK
    runs-on: ubuntu-latest
    
    outputs:
      apk-path: ${{ steps.build-apk.outputs.apk-path }}
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Get Version
        id: get-version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="v1.0.${GITHUB_RUN_NUMBER}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📱 Building version: $VERSION"

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 📱 Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
          cmake: 3.22.1
          ndk: 25.1.8937393

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'sperm-analyzer-mobile/package-lock.json'

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy tensorflow opencv-python ultralytics matplotlib scikit-learn pandas tqdm requests fastapi uvicorn

      - name: 🧹 Force Clean NPM State (GitHub Actions Fix)
        working-directory: ./sperm-analyzer-mobile
        run: |
          echo "🧹 FORCING CLEAN NPM STATE FOR GITHUB ACTIONS..."
          echo "📍 Current directory: $(pwd)"
          echo "🔍 Current branch: $(git branch --show-current)"
          echo "📦 Node.js version: $(node --version)"
          echo "📦 NPM version: $(npm --version)"
          
          # Show current files
          echo "📁 Files before cleanup:"
          ls -la package*.json .npmrc 2>/dev/null || echo "Some files missing"
          
          # FORCE delete everything NPM related
          echo "🔥 FORCE removing all NPM files..."
          rm -rf node_modules package-lock.json npm-shrinkwrap.json .npm 2>/dev/null || true
          
          # Backup original package.json and use minimal version
          echo "📋 Using minimal package.json for initial install..."
          cp package.json package-full.json
          cp package-minimal.json package.json
          
          # Create optimal .npmrc
          echo "📝 Creating optimized .npmrc..."
          cat > .npmrc << 'EOF'
          legacy-peer-deps=true
          auto-install-peers=true
          fund=false
          audit=false
          progress=false
          loglevel=warn
          EOF
          
          # Show minimal package.json dependencies
          echo "📋 Minimal package.json dependencies:"
          grep -A 15 '"dependencies"' package.json || echo "No dependencies section found"
          
          echo "✅ Clean state achieved with minimal dependencies"

      - name: 🔍 Verify Package Files
        working-directory: ./sperm-analyzer-mobile
        run: |
          echo "🔍 Verifying package files before npm ci..."
          echo "📋 Package.json TensorFlow.js versions:"
          grep -A 10 '"@tensorflow/tfjs"' package.json || echo "TensorFlow.js not found in package.json"
          
          echo "📋 Package.json devDependencies:"
          grep -A 10 '"devDependencies"' package.json || echo "No devDependencies found"
          
          if [ -f package-lock.json ]; then
            echo "📋 Package-lock.json TensorFlow.js versions:"
            grep '"@tensorflow/tfjs"' package-lock.json || echo "TensorFlow.js not found in package-lock.json"
            echo "📊 Package-lock.json size: $(wc -l < package-lock.json) lines"
          else
            echo "⚠️ package-lock.json does not exist!"
          fi
          
          echo "📁 Files in current directory:"
          ls -la package*.json .npmrc 2>/dev/null || echo "Some files missing"

      - name: 📦 Install Mobile Dependencies (Fresh Install)
        working-directory: ./sperm-analyzer-mobile
        run: |
          echo "📦 FRESH NPM INSTALL - NO npm ci..."
          echo "📍 Current directory: $(pwd)"
          echo "📁 Files present:"
          ls -la package*.json .npmrc
          
          # NO npm ci - go straight to npm install
          echo "🔧 Running fresh npm install with all optimizations..."
          npm install \
            --legacy-peer-deps \
            --no-optional \
            --no-audit \
            --no-fund \
            --progress=false \
            --loglevel=warn
          
          # Verify installation success
          echo "🔍 Verifying installation..."
          if [ -f package-lock.json ]; then
            echo "✅ package-lock.json created: $(wc -l < package-lock.json) lines"
          else
            echo "❌ package-lock.json NOT created!"
            exit 1
          fi
          
          if [ -d node_modules ]; then
            echo "✅ node_modules created: $(ls node_modules | wc -l) packages"
          else
            echo "❌ node_modules NOT created!"
            exit 1
          fi
          
          # Test if we can run npm commands
          echo "🧪 Testing npm ls..."
          npm ls --depth=0 || echo "npm ls had warnings (normal)"
          
          echo "✅ Fresh NPM install completed successfully!"

      - name: 🤖 Add TensorFlow.js (Separate Step)
        working-directory: ./sperm-analyzer-mobile
        run: |
          echo "🤖 Adding TensorFlow.js dependencies..."
          
          # Add TensorFlow.js packages one by one to avoid conflicts
          echo "📦 Installing TensorFlow.js core packages..."
          npm install --save \
            @tensorflow/tfjs@4.22.0 \
            @tensorflow/tfjs-core@4.22.0 \
            --legacy-peer-deps \
            --no-audit \
            --no-fund
          
          echo "📦 Installing TensorFlow.js backend packages..."
          npm install --save \
            @tensorflow/tfjs-backend-cpu@4.22.0 \
            @tensorflow/tfjs-backend-webgl@4.22.0 \
            --legacy-peer-deps \
            --no-audit \
            --no-fund
          
          echo "📦 Installing TensorFlow.js additional packages..."
          npm install --save \
            @tensorflow/tfjs-converter@4.22.0 \
            @tensorflow/tfjs-data@4.22.0 \
            @tensorflow/tfjs-layers@4.22.0 \
            --legacy-peer-deps \
            --no-audit \
            --no-fund
          
          echo "📦 Installing support packages..."
          npm install --save \
            seedrandom@3.0.5 \
            chalk@4.1.2 \
            core-js@3.29.1 \
            regenerator-runtime@0.13.11 \
            yargs@16.2.0 \
            --legacy-peer-deps \
            --no-audit \
            --no-fund
          
          # Install TypeScript types
          echo "📦 Installing TypeScript types..."
          npm install --save-dev \
            @types/seedrandom@2.4.34 \
            @types/offscreencanvas@2019.7.3 \
            @types/long@4.0.2 \
            @webgpu/types@0.1.38 \
            --legacy-peer-deps \
            --no-audit \
            --no-fund
          
          echo "🔍 Verifying TensorFlow.js installation..."
          npm ls @tensorflow/tfjs --depth=0 || echo "TensorFlow.js installed with warnings (normal)"
          
          echo "✅ TensorFlow.js installation completed!"

      - name: 🏗️ Build Mobile App
        working-directory: ./sperm-analyzer-mobile
        run: |
          echo "🏗️ Building mobile app..."
          npm run build
          echo "✅ Mobile app built successfully"

      - name: 🔧 Setup Capacitor
        working-directory: sperm-analyzer-mobile
        run: |
          npx cap add android || echo "Android platform already exists"
          npx cap sync android
          npx cap copy android

      - name: 🔐 Setup Android Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 || 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t' }}" | base64 -d > sperm-analyzer-mobile/android/app/keystore.jks || {
            # Create a debug keystore if secrets not available
            keytool -genkeypair -v -keystore sperm-analyzer-mobile/android/app/keystore.jks \
              -alias sperm-analyzer-key -keyalg RSA -keysize 2048 -validity 10000 \
              -storepass android -keypass android \
              -dname "CN=Sperm Analyzer AI, OU=Development, O=Sperm Analyzer, L=City, S=State, C=US"
            echo "🔑 Created debug keystore"
          }

      - name: 🔧 Configure Gradle Signing
        working-directory: sperm-analyzer-mobile/android
        run: |
          cat >> app/build.gradle << 'EOF'
          
          android {
              signingConfigs {
                  release {
                      keyAlias 'sperm-analyzer-key'
                      keyPassword 'android'
                      storeFile file('keystore.jks')
                      storePassword 'android'
                  }
              }
              buildTypes {
                  release {
                      signingConfig signingConfigs.release
                      minifyEnabled true
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
                  debug {
                      signingConfig signingConfigs.release
                  }
              }
          }
          EOF

      - name: 📱 Update App Version
        working-directory: sperm-analyzer-mobile/android/app
        run: |
          VERSION_CODE=$GITHUB_RUN_NUMBER
          VERSION_NAME="${{ steps.get-version.outputs.version }}"
          
          # Update build.gradle with version info
          sed -i "s/versionCode 1/versionCode $VERSION_CODE/" build.gradle
          sed -i "s/versionName \"1.0\"/versionName \"$VERSION_NAME\"/" build.gradle
          
          echo "📱 Updated to version $VERSION_NAME (code: $VERSION_CODE)"

      - name: 🔨 Build APK
        id: build-apk
        working-directory: sperm-analyzer-mobile/android
        run: |
          echo "🔨 Building APK..."
          ./gradlew assembleRelease --no-daemon --stacktrace
          
          # Find the generated APK
          APK_PATH=$(find app/build/outputs/apk/release -name "*.apk" | head -1)
          
          if [ -f "$APK_PATH" ]; then
            echo "✅ APK built successfully: $APK_PATH"
            echo "apk-path=$APK_PATH" >> $GITHUB_OUTPUT
            
            # Copy APK to workspace root with meaningful name
            VERSION="${{ steps.get-version.outputs.version }}"
            NEW_NAME="SpermAnalyzerAI-${VERSION}-release.apk"
            cp "$APK_PATH" "../../$NEW_NAME"
            echo "📱 APK saved as: $NEW_NAME"
            echo "final-apk=../../$NEW_NAME" >> $GITHUB_OUTPUT
            
            # Get APK info
            APK_SIZE=$(du -h "../../$NEW_NAME" | cut -f1)
            echo "📦 APK Size: $APK_SIZE"
            echo "apk-size=$APK_SIZE" >> $GITHUB_OUTPUT
          else
            echo "❌ APK not found!"
            exit 1
          fi

      - name: 🔍 APK Analysis
        working-directory: sperm-analyzer-mobile
        run: |
          APK_FILE="${{ steps.build-apk.outputs.final-apk }}"
          if [ -f "$APK_FILE" ]; then
            echo "📊 APK Analysis:"
            echo "==============="
            file "$APK_FILE"
            echo ""
            echo "📦 Size: ${{ steps.build-apk.outputs.apk-size }}"
            echo "🏷️ Version: ${{ steps.get-version.outputs.version }}"
            echo "📱 Package: com.scrapybara.spermanalyzer"
            echo ""
            
            # Verify APK signature
            jarsigner -verify -verbose -certs "$APK_FILE" && echo "✅ APK signature verified" || echo "⚠️ APK signature verification failed"
          fi

      - name: 📤 Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SpermAnalyzerAI-APK-${{ steps.get-version.outputs.version }}
          path: sperm-analyzer-mobile/SpermAnalyzerAI-*.apk
          retention-days: 30

      - name: 🎯 Create Release Notes
        id: release-notes
        run: |
          cat > release-notes.md << 'EOF'
          # 🧬 Sperm Analyzer AI v${{ steps.get-version.outputs.version }}
          
          ## ✨ Features
          - 🤖 **Real AI Analysis**: YOLOv8-based sperm detection
          - 📊 **Interactive Charts**: Motility, velocity, and count analysis
          - 📱 **Mobile Optimized**: Arabic RTL interface
          - 📤 **Export Data**: CSV and chart export functionality
          - 🎯 **CASA Metrics**: Complete sperm analysis metrics
          
          ## 📱 Installation
          1. Download the APK file below
          2. Enable "Install from Unknown Sources" in Android settings
          3. Install the APK file
          4. Grant camera and storage permissions
          
          ## 🌍 Languages
          - العربية (Arabic) - RTL Support
          - English
          
          ## 📊 App Details
          - **Package**: com.scrapybara.spermanalyzer
          - **Size**: ${{ steps.build-apk.outputs.apk-size }}
          - **Min SDK**: 24 (Android 7.0)
          - **Target SDK**: 34 (Android 14)
          
          ## ⚠️ Medical Disclaimer
          This application is for educational and research purposes only. Always consult with a medical professional for clinical diagnosis.
          
          ## 🔧 Technical Details
          - Built with Capacitor + JavaScript
          - Real-time AI processing
          - Chart.js visualization
          - Offline capable
          EOF

      - name: 🚀 Create GitHub Release
        if: github.event.inputs.create_release == 'true' || startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get-version.outputs.version }}
          name: Sperm Analyzer AI ${{ steps.get-version.outputs.version }}
          body_path: release-notes.md
          files: |
            sperm-analyzer-mobile/SpermAnalyzerAI-*.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-apk:
    name: 🧪 Test APK Installation
    runs-on: ubuntu-latest
    needs: build-android
    if: always() && needs.build-android.result == 'success'
    
    steps:
      - name: 📥 Download APK
        uses: actions/download-artifact@v4
        with:
          name: SpermAnalyzerAI-APK-${{ needs.build-android.outputs.version }}

      - name: 🧪 Basic APK Tests
        run: |
          echo "🧪 Running APK Tests..."
          
          APK_FILE=$(find . -name "SpermAnalyzerAI-*.apk" | head -1)
          
          if [ -f "$APK_FILE" ]; then
            echo "✅ APK file exists: $APK_FILE"
            
            # Check file size (should be reasonable)
            SIZE=$(stat -c%s "$APK_FILE")
            if [ $SIZE -gt 1000000 ]; then  # > 1MB
              echo "✅ APK size is reasonable: $(($SIZE / 1024 / 1024))MB"
            else
              echo "⚠️ APK size seems small: $(($SIZE / 1024))KB"
            fi
            
            # Basic file validation
            file "$APK_FILE"
            
            echo "🎉 APK tests completed successfully!"
          else
            echo "❌ APK file not found!"
            exit 1
          fi

  notify:
    name: 📢 Notify Build Result
    runs-on: ubuntu-latest
    needs: [build-android, test-apk]
    if: always()
    
    steps:
      - name: 📢 Build Success Notification
        if: needs.build-android.result == 'success'
        run: |
          echo "🎉 BUILD SUCCESSFUL!"
          echo "==================="
          echo "✅ APK built successfully"
          echo "📱 Version: ${{ needs.build-android.outputs.version }}"
          echo "📦 Download from Actions artifacts or GitHub Releases"
          echo ""
          echo "🚀 Ready for installation on Android devices!"

      - name: 📢 Build Failure Notification  
        if: needs.build-android.result == 'failure'
        run: |
          echo "❌ BUILD FAILED!"
          echo "==============="
          echo "💥 Check the build logs for details"
          echo "🔧 Common issues:"
          echo "   - Missing dependencies"
          echo "   - Android SDK problems"
          echo "   - Build configuration errors"