name: üß¨ Build Android APK - Sperm Analyzer AI

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: 'true'
        type: boolean

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  FLUTTER_VERSION: 'stable'

jobs:
  build-android:
    name: ü§ñ Build Android APK
    runs-on: ubuntu-latest
    
    outputs:
      apk-path: ${{ steps.build-apk.outputs.apk-path }}
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üè∑Ô∏è Get Version
        id: get-version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="v1.0.${GITHUB_RUN_NUMBER}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì± Building version: $VERSION"

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: üì± Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
          cmake: 3.22.1
          ndk: 25.1.8937393

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'sperm-analyzer-mobile/package-lock.json'

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üì¶ Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy tensorflow opencv-python ultralytics matplotlib scikit-learn pandas tqdm requests fastapi uvicorn

      - name: üì¶ Install Mobile Dependencies
        working-directory: sperm-analyzer-mobile
        run: |
          npm ci
          npm run build

      - name: üîß Setup Capacitor
        working-directory: sperm-analyzer-mobile
        run: |
          npx cap add android || echo "Android platform already exists"
          npx cap sync android
          npx cap copy android

      - name: üîê Setup Android Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 || 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t' }}" | base64 -d > sperm-analyzer-mobile/android/app/keystore.jks || {
            # Create a debug keystore if secrets not available
            keytool -genkeypair -v -keystore sperm-analyzer-mobile/android/app/keystore.jks \
              -alias sperm-analyzer-key -keyalg RSA -keysize 2048 -validity 10000 \
              -storepass android -keypass android \
              -dname "CN=Sperm Analyzer AI, OU=Development, O=Sperm Analyzer, L=City, S=State, C=US"
            echo "üîë Created debug keystore"
          }

      - name: üîß Configure Gradle Signing
        working-directory: sperm-analyzer-mobile/android
        run: |
          cat >> app/build.gradle << 'EOF'
          
          android {
              signingConfigs {
                  release {
                      keyAlias 'sperm-analyzer-key'
                      keyPassword 'android'
                      storeFile file('keystore.jks')
                      storePassword 'android'
                  }
              }
              buildTypes {
                  release {
                      signingConfig signingConfigs.release
                      minifyEnabled true
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
                  debug {
                      signingConfig signingConfigs.release
                  }
              }
          }
          EOF

      - name: üì± Update App Version
        working-directory: sperm-analyzer-mobile/android/app
        run: |
          VERSION_CODE=$GITHUB_RUN_NUMBER
          VERSION_NAME="${{ steps.get-version.outputs.version }}"
          
          # Update build.gradle with version info
          sed -i "s/versionCode 1/versionCode $VERSION_CODE/" build.gradle
          sed -i "s/versionName \"1.0\"/versionName \"$VERSION_NAME\"/" build.gradle
          
          echo "üì± Updated to version $VERSION_NAME (code: $VERSION_CODE)"

      - name: üî® Build APK
        id: build-apk
        working-directory: sperm-analyzer-mobile/android
        run: |
          echo "üî® Building APK..."
          ./gradlew assembleRelease --no-daemon --stacktrace
          
          # Find the generated APK
          APK_PATH=$(find app/build/outputs/apk/release -name "*.apk" | head -1)
          
          if [ -f "$APK_PATH" ]; then
            echo "‚úÖ APK built successfully: $APK_PATH"
            echo "apk-path=$APK_PATH" >> $GITHUB_OUTPUT
            
            # Copy APK to workspace root with meaningful name
            VERSION="${{ steps.get-version.outputs.version }}"
            NEW_NAME="SpermAnalyzerAI-${VERSION}-release.apk"
            cp "$APK_PATH" "../../$NEW_NAME"
            echo "üì± APK saved as: $NEW_NAME"
            echo "final-apk=../../$NEW_NAME" >> $GITHUB_OUTPUT
            
            # Get APK info
            APK_SIZE=$(du -h "../../$NEW_NAME" | cut -f1)
            echo "üì¶ APK Size: $APK_SIZE"
            echo "apk-size=$APK_SIZE" >> $GITHUB_OUTPUT
          else
            echo "‚ùå APK not found!"
            exit 1
          fi

      - name: üîç APK Analysis
        working-directory: sperm-analyzer-mobile
        run: |
          APK_FILE="${{ steps.build-apk.outputs.final-apk }}"
          if [ -f "$APK_FILE" ]; then
            echo "üìä APK Analysis:"
            echo "==============="
            file "$APK_FILE"
            echo ""
            echo "üì¶ Size: ${{ steps.build-apk.outputs.apk-size }}"
            echo "üè∑Ô∏è Version: ${{ steps.get-version.outputs.version }}"
            echo "üì± Package: com.scrapybara.spermanalyzer"
            echo ""
            
            # Verify APK signature
            jarsigner -verify -verbose -certs "$APK_FILE" && echo "‚úÖ APK signature verified" || echo "‚ö†Ô∏è APK signature verification failed"
          fi

      - name: üì§ Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SpermAnalyzerAI-APK-${{ steps.get-version.outputs.version }}
          path: sperm-analyzer-mobile/SpermAnalyzerAI-*.apk
          retention-days: 30

      - name: üéØ Create Release Notes
        id: release-notes
        run: |
          cat > release-notes.md << 'EOF'
          # üß¨ Sperm Analyzer AI v${{ steps.get-version.outputs.version }}
          
          ## ‚ú® Features
          - ü§ñ **Real AI Analysis**: YOLOv8-based sperm detection
          - üìä **Interactive Charts**: Motility, velocity, and count analysis
          - üì± **Mobile Optimized**: Arabic RTL interface
          - üì§ **Export Data**: CSV and chart export functionality
          - üéØ **CASA Metrics**: Complete sperm analysis metrics
          
          ## üì± Installation
          1. Download the APK file below
          2. Enable "Install from Unknown Sources" in Android settings
          3. Install the APK file
          4. Grant camera and storage permissions
          
          ## üåç Languages
          - ÿßŸÑÿπÿ±ÿ®Ÿäÿ© (Arabic) - RTL Support
          - English
          
          ## üìä App Details
          - **Package**: com.scrapybara.spermanalyzer
          - **Size**: ${{ steps.build-apk.outputs.apk-size }}
          - **Min SDK**: 24 (Android 7.0)
          - **Target SDK**: 34 (Android 14)
          
          ## ‚ö†Ô∏è Medical Disclaimer
          This application is for educational and research purposes only. Always consult with a medical professional for clinical diagnosis.
          
          ## üîß Technical Details
          - Built with Capacitor + JavaScript
          - Real-time AI processing
          - Chart.js visualization
          - Offline capable
          EOF

      - name: üöÄ Create GitHub Release
        if: github.event.inputs.create_release == 'true' || startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get-version.outputs.version }}
          name: Sperm Analyzer AI ${{ steps.get-version.outputs.version }}
          body_path: release-notes.md
          files: |
            sperm-analyzer-mobile/SpermAnalyzerAI-*.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-apk:
    name: üß™ Test APK Installation
    runs-on: ubuntu-latest
    needs: build-android
    if: always() && needs.build-android.result == 'success'
    
    steps:
      - name: üì• Download APK
        uses: actions/download-artifact@v4
        with:
          name: SpermAnalyzerAI-APK-${{ needs.build-android.outputs.version }}

      - name: üß™ Basic APK Tests
        run: |
          echo "üß™ Running APK Tests..."
          
          APK_FILE=$(find . -name "SpermAnalyzerAI-*.apk" | head -1)
          
          if [ -f "$APK_FILE" ]; then
            echo "‚úÖ APK file exists: $APK_FILE"
            
            # Check file size (should be reasonable)
            SIZE=$(stat -c%s "$APK_FILE")
            if [ $SIZE -gt 1000000 ]; then  # > 1MB
              echo "‚úÖ APK size is reasonable: $(($SIZE / 1024 / 1024))MB"
            else
              echo "‚ö†Ô∏è APK size seems small: $(($SIZE / 1024))KB"
            fi
            
            # Basic file validation
            file "$APK_FILE"
            
            echo "üéâ APK tests completed successfully!"
          else
            echo "‚ùå APK file not found!"
            exit 1
          fi

  notify:
    name: üì¢ Notify Build Result
    runs-on: ubuntu-latest
    needs: [build-android, test-apk]
    if: always()
    
    steps:
      - name: üì¢ Build Success Notification
        if: needs.build-android.result == 'success'
        run: |
          echo "üéâ BUILD SUCCESSFUL!"
          echo "==================="
          echo "‚úÖ APK built successfully"
          echo "üì± Version: ${{ needs.build-android.outputs.version }}"
          echo "üì¶ Download from Actions artifacts or GitHub Releases"
          echo ""
          echo "üöÄ Ready for installation on Android devices!"

      - name: üì¢ Build Failure Notification  
        if: needs.build-android.result == 'failure'
        run: |
          echo "‚ùå BUILD FAILED!"
          echo "==============="
          echo "üí• Check the build logs for details"
          echo "üîß Common issues:"
          echo "   - Missing dependencies"
          echo "   - Android SDK problems"
          echo "   - Build configuration errors"